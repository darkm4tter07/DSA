/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head==nullptr) return nullptr;
        unordered_map<Node*,Node*> mp;
        Node* temp = head;
        Node* newHead, *tail=new Node(temp->val);
        newHead = tail;
        mp[temp]=tail;
        temp = temp->next;
        while(temp){
            Node* temp2 = new Node(temp->val);
            tail->next = temp2;
            tail=temp2;
            mp[temp]=tail;
            temp = temp->next;
        }
        temp = head;
        while(temp){
            if(mp.find(temp->random)!=mp.end()){
                (mp[temp])->random = (mp.find(temp->random))->second;
            }else{
                (mp[temp])->random = nullptr;
            }
            temp = temp->next;
        }
        return newHead;
    }
};

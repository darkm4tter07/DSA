/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode* fast=head;ListNode* slow=head;
        //1fs 2s 3fs 2 1f null
        //1fs 2s 2fs 1 nullf
        //1->2-><-2<-1
        while(fast && fast->next){
            fast = fast->next->next;
            slow = slow->next;
        }
        //slow pointer have reached at middle of LL
        //reversing the second half
        ListNode* prev = nullptr; ListNode* temp = slow;
        while(temp){
            temp = slow->next;
            slow->next = prev;
            prev = slow;
            slow = temp;
        }
        slow = prev;
        //setting slow pointer to the end of LL
        temp = head;
        //setting temp to head
        while(temp && slow){
            if(temp->val!=slow->val){
                return false;
            }
            temp = temp->next;
            slow = slow->next;
        }
        return true;
    }
};
